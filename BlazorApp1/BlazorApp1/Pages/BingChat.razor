@page "/BingChat"

@using BlazorApp1.Extensions
@using global::BingChat
@*@attribute [Authorize(Roles = "User")]*@
@* <h5>Debug......</h5> *@
<PageTitle>Chat</PageTitle>

<a id="top"></a>

<PageHeader Icon="fa-brands fa-microsoft">NewBing</PageHeader>

<p class="mb-4">This is NewBing</p>

<EditForm Model="Request" OnValidSubmit="OnSubmitAsync">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#chatModal">Hello Bing</button>

    <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasOptions" aria-labelledby="offcanvasOptionsLabel" style="z-index: 10000;">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasOptionsLabel">BingOption</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
           <BingOptions Options="op" conversation="conversation" Request="Request"></BingOptions>
        </div>
    </div>

    <div class="modal" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header text-bg-light">
                    <h5 class="modal-title" id="chatModalLabel">NewBing</h5>
                    <button type="button" class="btn-close btn-close-dark" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-header" style="background-color: #f7f7f7;">
                    <div class="row m-auto">
                        <div class="col-12">
                            <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasOptions" aria-controls="offcanvasOptions"><i class="fa-solid fa-gear"></i> Options</button>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    @if (Messages.Any())
                    {
                        <div class="mb-4">
                            @foreach (var message in Messages)
                            {
                                if (message.Role is "User")
                                {
                                    <div class="d-flex flex-row justify-content-end mb-3">
                                        <div class="col-8 p-3 me-3 border rounded">
                                            @message.Content
                                        </div>
                                        <span class="fw-bold mt-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-emoji-heart-eyes" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                <path d="M11.315 10.014a.5.5 0 0 1 .548.736A4.498 4.498 0 0 1 7.965 13a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .548-.736h.005l.017.005.067.015.252.055c.215.046.515.108.857.169.693.124 1.522.242 2.152.242.63 0 1.46-.118 2.152-.242a26.58 26.58 0 0 0 1.109-.224l.067-.015.017-.004.005-.002zM4.756 4.566c.763-1.424 4.02-.12.952 3.434-4.496-1.596-2.35-4.298-.952-3.434zm6.488 0c1.398-.864 3.544 1.838-.952 3.434-3.067-3.554.19-4.858.952-3.434z"/>
                                            </svg>
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex flex-row justify-content-start mb-3">
                                        <span class="fw-bold mt-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-emoji-sunglasses" viewBox="0 0 16 16">
                                                <path d="M4.968 9.75a.5.5 0 1 0-.866.5A4.498 4.498 0 0 0 8 12.5a4.5 4.5 0 0 0 3.898-2.25.5.5 0 1 0-.866-.5A3.498 3.498 0 0 1 8 11.5a3.498 3.498 0 0 1-3.032-1.75zM7 5.116V5a1 1 0 0 0-1-1H3.28a1 1 0 0 0-.97 1.243l.311 1.242A2 2 0 0 0 4.561 8H5a2 2 0 0 0 1.994-1.839A2.99 2.99 0 0 1 8 6c.393 0 .74.064 1.006.161A2 2 0 0 0 11 8h.438a2 2 0 0 0 1.94-1.515l.311-1.242A1 1 0 0 0 12.72 4H10a1 1 0 0 0-1 1v.116A4.22 4.22 0 0 0 8 5c-.35 0-.69.04-1 .116z"/>
                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-1 0A7 7 0 1 0 1 8a7 7 0 0 0 14 0z"/>
                                            </svg>
                                        </span>
                                        <div class="col-8 p-3 ms-3 border rounded" style="background-color: #f7f7f7;">
                                            @if (string.IsNullOrEmpty(message.Content))
                                            {
                                                <i class="fa-regular fa-comment-dots"></i>
                                            }
                                            else
                                            {
                                                @((MarkupString)message.Content)
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                    <a id="bottom"></a>
                </div>
                <div class="modal-footer">
                    <div class="input-group">
                        <InputText id="Prompt" placeholder="Message" @bind-Value="Prompt" class="form-control"/>
                        @if (IsProcessing)
                        {
                            <button type="submit" class="btn btn-primary text-nowrap" disabled>
                                <i class="fa-solid fa-paper-plane"></i>
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary text-nowrap">
                                <i class="fa-solid fa-paper-plane"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {

    private bool IsProcessing = false;
    protected IList<BingMessage> Messages { get; set; } = new List<BingMessage>();
    private string Prompt = string.Empty;

    private BingChatClientOptions op = new BingChatClientOptions()
    {
        Tone = BingChatTone.Balanced
    };

    private BingChatClient? Request;
    private BingChatConversation conversation;
    protected override async void OnInitialized()
    {
        Request = new BingChatClient(op);
        conversation = await Request.CreateConversation();
    }

    private async void OnSubmitAsync()
    {
        Messages.Add(new BingMessage()
        {
            Role = "User",
            Content = Prompt,
        });
        IsProcessing = true;
        Messages.Add(new BingMessage()
        {
            Role = "NewBing",
            Content = string.Empty
        });
        var responseStream = Request.StreamAsync(Prompt);
        Prompt = string.Empty;
        await foreach (var completion in responseStream)
        {
            Messages.Last().Content += completion;

            if (Messages.Last().Content.ContainsCode())
            {
                Messages.Last().Content = Messages.Last().Content.FormatCode()!;
            }
            await InvokeAsync(StateHasChanged);
        }
        IsProcessing = false;
        await InvokeAsync(StateHasChanged);
    }

    public class BingMessage
    {
        public string Role { get; set; }
        public string Content { get; set; }
    }

}

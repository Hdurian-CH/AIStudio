
@using BlazorApp1.Authentication
@inject IJSRuntime Js
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<section class="h-100">
    <div class="container h-100">
        <div class="row justify-content-sm-center h-100">
            <div class="col-xxl-4 col-xl-5 col-lg-5 col-md-7 col-sm-9">
                <div class="text-center my-5">
                </div>
                <div class="card shadow-lg">
                    <div class="card-body p-5">
                        <h1 class="fs-4 card-title fw-bold mb-4">Login</h1>
                        <div class="mb-3">
                                <div class="mb-2 w-100">
                                    <label class="text-muted" for="password">Password</label>
                                </div>
                                <input @bind="model.Password" id="password" type="password" class="form-control" name="password" required>
                            </div>

                            <div class="d-flex align-items-center">
                                <button  class="btn btn-primary ms-auto" @onclick="LoginTask">
                                    Login
                                </button>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {
    private LoginModel model = new LoginModel();

    private async Task LoginTask()
    {
         if (UserStaticClass.HashPassword(model.Password) != UserStaticClass.UserPassword)
        {
            await Js.InvokeVoidAsync("alert", "error Password");
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
            {
                UserName = "test",
                Role = "User"
            });
            
            Nav.NavigateTo("/");
            
        }
    }
}
